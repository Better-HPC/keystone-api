name: ðŸ¤– Test

on:
  workflow_call:

jobs:

  # System configuration tests including checks for obviously
  # incorrect settings and missing database migrations
  system-config:
    name: System Tests
    runs-on: ubuntu-latest

    steps:
      - name: Fetch image artifact
        uses: actions/download-artifact@v5
        with:
          name: keystone-api-docker
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/keystone-api.tar

      - name: Run project checks
        run: docker run keystone-api check

      - name: Run migration checks
        run: docker run keystone-api makemigrations --check

  # Integration test requiring all API health checks to pass
  # when launching the docker container with default settings.
  health-checks:
    name: API Health Checks
    runs-on: ubuntu-latest

    steps:
      - name: Fetch image artifact
        uses: actions/download-artifact@v5
        with:
          name: keystone-api-docker
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/keystone-api.tar

      - name: Run API health checks
        run: |
          docker run --detach -p 8000:8000 keystone-api
          sleep 30  # Wait for API server to start
          
          # Display health check data
          curl -L -s -o response.txt -w "%{http_code}" localhost:8000/health/json/
          jq . response.txt
          
          # Error on a bad status code
          status=$(curl -L -s -w "%{http_code}" localhost:8000/health/)
          if [ "$status" -ne 200 ]; then
            exit 1
          fi

  # Run application level unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Fetch image artifact
        uses: actions/download-artifact@v5
        with:
          name: keystone-api-docker
          path: /tmp

      - name: Run tests
        run: |
          docker load --input /tmp/keystone-api.tar

          # Dynamically determine the installed package directory
          PACKAGE_DIR=$(docker run --entrypoint python --rm keystone-api -c 'import site; print(site.getsitepackages()[0])')

          # Define common runtime settings for tests
          OUTPUT_FILE=/tmp/test/.coverage
          OMIT_PATHS="*/tests/*,*/migrations/*"
          INCLUDE_PATHS="*/keystone_api/apps/*,*/keystone_api/plugins/*"

          # Helper function to run the coverage utility inside the container
          coverage() {
            docker run -v $(pwd)/coverage:/tmp/test --entrypoint coverage keystone-api "$@"
          }

          # Run tests and collect coverage
          coverage run \
            --data-file $OUTPUT_FILE \
            --source $PACKAGE_DIR/keystone_api \
            /usr/local/bin/keystone-api test apps plugins

          # Report coverage to the console
          coverage report \
            --data-file $OUTPUT_FILE \
            --omit "$OMIT_PATHS" \
            --include "$INCLUDE_PATHS"

          # Write coverage report to disk in XML format
          coverage xml \
            --data-file $OUTPUT_FILE \
            --omit "$OMIT_PATHS" \
            --include "$INCLUDE_PATHS" \
            -o /tmp/test/report.xml

      - name: Report coverage results
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Python -r coverage/report.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  # Run package level function tests
  function-tests:
    name: Function Tests
    runs-on: ubuntu-latest

    steps:
      - name: Fetch image artifact
        uses: actions/download-artifact@v5
        with:
          name: keystone-api-docker
          path: /tmp

      - name: Run tests
        run: |
          docker load --input /tmp/keystone-api.tar
          docker run -e API_THROTTLE_ANON="1000/sec" -e API_THROTTLE_USER="1000/sec" keystone-api test tests

  report-test-status:
    name: Report Test Status
    runs-on: ubuntu-latest
    needs: [ unit-tests, function-tests, system-config, health-checks ]
    if: always()

    steps:
      - name: Check test status
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'skipped') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
